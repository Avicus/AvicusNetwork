package net.avicus.magma.api.graph.mutations.user_login;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.shopify.graphql.support.AbstractResponse;
import com.shopify.graphql.support.SchemaViolationError;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import net.avicus.magma.api.graph.mutations.user_login.chat_data.ChatData;
import net.avicus.magma.api.graph.mutations.user_login.disallow_scope.DisallowScope;
import net.avicus.magma.api.graph.types.backpack_gadget.BackpackGadget;
import net.avicus.magma.api.graph.types.setting.Setting;

/**
 * Autogenerated return type of UserLogin
 */
public class UserLogin extends AbstractResponse<UserLogin> {

  public UserLogin(JsonObject fields) throws SchemaViolationError {
    for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
      String key = field.getKey();
      String fieldName = getFieldName(key);
      switch (fieldName) {
        case "chat_data": {
          responseData.put(key, new ChatData(jsonAsObject(field.getValue(), key)));

          break;
        }

        case "clientMutationId": {
          String optional1 = null;
          if (!field.getValue().isJsonNull()) {
            optional1 = jsonAsString(field.getValue(), key);
          }

          responseData.put(key, optional1);

          break;
        }

        case "disallow_scope": {
          responseData.put(key, new DisallowScope(jsonAsObject(field.getValue(), key)));

          break;
        }

        case "gadgets": {
          List<BackpackGadget> list1 = new ArrayList<>();
          for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
            BackpackGadget optional2 = null;
            if (!element1.isJsonNull()) {
              optional2 = new BackpackGadget(jsonAsObject(element1, key));
            }

            list1.add(optional2);
          }

          responseData.put(key, list1);

          break;
        }

        case "has_alerts": {
          responseData.put(key, jsonAsBoolean(field.getValue(), key));

          break;
        }

        case "message": {
          String optional1 = null;
          if (!field.getValue().isJsonNull()) {
            optional1 = jsonAsString(field.getValue(), key);
          }

          responseData.put(key, optional1);

          break;
        }

        case "permissions": {
          List<String> list1 = new ArrayList<>();
          for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
            String optional2 = null;
            if (!element1.isJsonNull()) {
              optional2 = jsonAsString(element1, key);
            }

            list1.add(optional2);
          }

          responseData.put(key, list1);

          break;
        }

        case "settings": {
          List<Setting> list1 = new ArrayList<>();
          for (JsonElement element1 : jsonAsArray(field.getValue(), key)) {
            Setting optional2 = null;
            if (!element1.isJsonNull()) {
              optional2 = new Setting(jsonAsObject(element1, key));
            }

            list1.add(optional2);
          }

          responseData.put(key, list1);

          break;
        }

        case "__typename": {
          responseData.put(key, jsonAsString(field.getValue(), key));
          break;
        }
        default: {
          throw new SchemaViolationError(this, key, field.getValue());
        }
      }
    }
  }

  public String getGraphQlTypeName() {
    return "UserLoginPayload";
  }

  /**
   * Information about the user's display in chat.
   */

  public ChatData getChatData() {
    return (ChatData) get("chat_data");
  }

  public UserLogin setChatData(ChatData arg) {
    optimisticData.put(getKey("chat_data"), arg);
    return this;
  }

  /**
   * A unique identifier for the client performing the mutation.
   */

  public String getClientMutationId() {
    return (String) get("clientMutationId");
  }

  public UserLogin setClientMutationId(String arg) {
    optimisticData.put(getKey("clientMutationId"), arg);
    return this;
  }

  /**
   * Information about if this login is allowed.
   */

  public DisallowScope getDisallowScope() {
    return (DisallowScope) get("disallow_scope");
  }

  public UserLogin setDisallowScope(DisallowScope arg) {
    optimisticData.put(getKey("disallow_scope"), arg);
    return this;
  }

  /**
   * Gadgets which a user has in their backpack.
   */

  public List<BackpackGadget> getGadgets() {
    return (List<BackpackGadget>) get("gadgets");
  }

  public UserLogin setGadgets(List<BackpackGadget> arg) {
    optimisticData.put(getKey("gadgets"), arg);
    return this;
  }

  /**
   * If the user has web alerts which are unread.
   */

  public Boolean hasAlerts() {
    return (Boolean) get("has_alerts");
  }

  public UserLogin setHasAlerts(Boolean arg) {
    optimisticData.put(getKey("has_alerts"), arg);
    return this;
  }

  /**
   * Message to be shown to the user when they join. This is usually a recent announce message.
   */

  public String getMessage() {
    return (String) get("message");
  }

  public UserLogin setMessage(String arg) {
    optimisticData.put(getKey("message"), arg);
    return this;
  }

  /**
   * Permissions that the user should receive when joining this server. These include category
   * permissions.
   */

  public List<String> getPermissions() {
    return (List<String>) get("permissions");
  }

  public UserLogin setPermissions(List<String> arg) {
    optimisticData.put(getKey("permissions"), arg);
    return this;
  }

  /**
   * Saved settings for the user.
   */

  public List<Setting> getSettings() {
    return (List<Setting>) get("settings");
  }

  public UserLogin setSettings(List<Setting> arg) {
    optimisticData.put(getKey("settings"), arg);
    return this;
  }

  public boolean unwrapsToObject(String key) {
    switch (getFieldName(key)) {
      case "chat_data":
        return true;

      case "clientMutationId":
        return false;

      case "disallow_scope":
        return true;

      case "gadgets":
        return true;

      case "has_alerts":
        return false;

      case "message":
        return false;

      case "permissions":
        return false;

      case "settings":
        return true;

      default:
        return false;
    }
  }
}
